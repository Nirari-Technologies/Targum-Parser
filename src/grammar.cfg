/**
 * Targum Parser is an interpreted PEG parser!
 * 
 * 
 * Keys represent the rules of your grammar.
 * Values represent the expression of that rule.
 * ALL grammatical values must be strings.
 * 
 * The FIRST key-value will be executed, this is a TOP-DOWN Parser.
 * The PEG semantics is right-associative.
 * 
 * To run a rule, you wrap it around <>.
 * Make sure the rule exists or you will be given a parsing error.
 * 
 * Sequences have a lesser priority than Alternation.
 * 
 * Required tokens/strings must be wrapped in single or double quotes.
 * 
 * You can wrap grammar expressions into groups using parentheses ():
 * -- <a> ('b' | 'c')
 * 
 * Alternate rulings are done using the pipe aka vertical bar '|'
 * or the forward slash aka division sign '/':
 * -- 'a' / <b>
 * 
 * Optional expressions are done by grouping expressions into square brackets []:
 * -- [<a>]
 * 
 * Sub-expressions within an optional or group expression run as sequences.
 * 
 * Repetition is done with:
 * -- +<a> -> 1 or more <a>.
 * -- *<a> -> 0 or more <a>.
 * See PEG parsers for more information on repetition.
 * 
 * Lookahead, which doesn't consume any input, is done with:
 * -- &<a> -> positive lookahead.
 * -- !<a> -> negative lookahead.
 * 
 * To gain access to literal value tokens (like '1234' or '3.f') from a lexer,
 * use {key} which will be used to access specific literal tokens.
 * 
 * Here's an example for when you need to get an integer literal token:
 * 'rule': '{int}'
 * 
 * `targum_parser_define_token(&parser, "int", token_int_value);`
 */

'grammar': {
	'sum':  '<expr> "âˆ‘" <expr> "=>" <expr>'
	'expr': '{integer}'
}
